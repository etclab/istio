// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: key_curator.proto

package key_curator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeyCurator_FetchUpdate_FullMethodName       = "/keycurator.KeyCurator/FetchUpdate"
	KeyCurator_FetchPublicParams_FullMethodName = "/keycurator.KeyCurator/FetchPublicParams"
	KeyCurator_RegisterUser_FullMethodName      = "/keycurator.KeyCurator/RegisterUser"
)

// KeyCuratorClient is the client API for KeyCurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyCuratorClient interface {
	// rpc FetchId(IdRequest) returns (IdResponse) {}
	FetchUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	FetchPublicParams(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PublicParamsResponse, error)
	RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type keyCuratorClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyCuratorClient(cc grpc.ClientConnInterface) KeyCuratorClient {
	return &keyCuratorClient{cc}
}

func (c *keyCuratorClient) FetchUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, KeyCurator_FetchUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyCuratorClient) FetchPublicParams(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PublicParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicParamsResponse)
	err := c.cc.Invoke(ctx, KeyCurator_FetchPublicParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyCuratorClient) RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, KeyCurator_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyCuratorServer is the server API for KeyCurator service.
// All implementations must embed UnimplementedKeyCuratorServer
// for forward compatibility.
type KeyCuratorServer interface {
	// rpc FetchId(IdRequest) returns (IdResponse) {}
	FetchUpdate(context.Context, *UpdateRequest) (*UpdateResponse, error)
	FetchPublicParams(context.Context, *emptypb.Empty) (*PublicParamsResponse, error)
	RegisterUser(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedKeyCuratorServer()
}

// UnimplementedKeyCuratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyCuratorServer struct{}

func (UnimplementedKeyCuratorServer) FetchUpdate(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUpdate not implemented")
}
func (UnimplementedKeyCuratorServer) FetchPublicParams(context.Context, *emptypb.Empty) (*PublicParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPublicParams not implemented")
}
func (UnimplementedKeyCuratorServer) RegisterUser(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedKeyCuratorServer) mustEmbedUnimplementedKeyCuratorServer() {}
func (UnimplementedKeyCuratorServer) testEmbeddedByValue()                    {}

// UnsafeKeyCuratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyCuratorServer will
// result in compilation errors.
type UnsafeKeyCuratorServer interface {
	mustEmbedUnimplementedKeyCuratorServer()
}

func RegisterKeyCuratorServer(s grpc.ServiceRegistrar, srv KeyCuratorServer) {
	// If the following call pancis, it indicates UnimplementedKeyCuratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyCurator_ServiceDesc, srv)
}

func _KeyCurator_FetchUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyCuratorServer).FetchUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyCurator_FetchUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyCuratorServer).FetchUpdate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyCurator_FetchPublicParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyCuratorServer).FetchPublicParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyCurator_FetchPublicParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyCuratorServer).FetchPublicParams(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyCurator_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyCuratorServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyCurator_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyCuratorServer).RegisterUser(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyCurator_ServiceDesc is the grpc.ServiceDesc for KeyCurator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyCurator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keycurator.KeyCurator",
	HandlerType: (*KeyCuratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchUpdate",
			Handler:    _KeyCurator_FetchUpdate_Handler,
		},
		{
			MethodName: "FetchPublicParams",
			Handler:    _KeyCurator_FetchPublicParams_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _KeyCurator_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "key_curator.proto",
}
