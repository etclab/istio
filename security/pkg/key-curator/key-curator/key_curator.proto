syntax = "proto3";

option go_package = "istio.io/istio/security/pkg/key-curator/key-curator";

import "rbe.proto";
import "google/protobuf/empty.proto";

package keycurator;

service KeyCurator {

    rpc FetchUpdate(UpdateRequest) returns (UpdateResponse) {}
    rpc FetchPublicParams(google.protobuf.Empty) returns (PublicParamsResponse) {}
    rpc RegisterUser(RegisterRequest) returns (RegisterResponse) {}
    
    // todo: remove this later
    // after alice receives the pp -- she'll encrypt a message with id 1
    // there'll be a user with id 1 at server side -- alice will send the
    // encrypted message to the server to decrypt
    rpc Decrypt(DecryptRequest) returns (google.protobuf.Empty) {}
}

message Empty {}

message PublicParamsResponse {
    rbe.proto.PublicParams pp = 1;
}

message RegisterRequest {
    int32 id = 1;
    rbe.proto.G1 publicKey = 2;
    repeated rbe.proto.G1 xi = 3;
}

message RegisterResponse {
    repeated rbe.proto.G1 commitments = 1; 
    repeated rbe.proto.G1 opening = 2; 
}

message UpdateRequest {
    int32 id = 1;
}

// same as RegisterResponse
message UpdateResponse {
    repeated rbe.proto.G1 commitments = 1; 
    repeated rbe.proto.G1 opening = 2; 
}

message DecryptRequest {
    int32 id = 1;
    rbe.proto.Ciphertext ciphertext = 2;
}